#include "stdint.h"
#include "tm4c123gh6pm.h"

#define SYSCTL_RCGCGPIO_R       (*((volatile unsigned long *)0x400FE608))

#define GPIO_PORTF_DATA_R       (*((volatile unsigned long *)0x400253FC))
#define GPIO_PORTF_DIR_R        (*((volatile unsigned long *)0x40025400))
#define GPIO_PORTF_DEN_R        (*((volatile unsigned long *)0x4002551C))
#define GPIO_PORTF_PUR_R        (*((volatile unsigned long *)0x40025510))

#define GPIO_PORTF_IS_R         (*((volatile unsigned long *)0x40025404))
#define GPIO_PORTF_IBE_R        (*((volatile unsigned long *)0x40025408))
#define GPIO_PORTF_IEV_R        (*((volatile unsigned long *)0x4002540C))
#define GPIO_PORTF_IM_R         (*((volatile unsigned long *)0x40025410))
#define GPIO_PORTF_ICR_R        (*((volatile unsigned long *)0x4002541C))

// IRQ 0 to 31 Set Enable Register
#define NVIC_EN0_R              (*((volatile unsigned long *)0xE000E100))
	
// IRQ 28 to 31 Priority Register
#define NVIC_PRI7_R              (*((volatile unsigned long *)0xE000E41C))
	
#define NVIC_EN0_INT30            0x40000000   //Interrupt 30 Enable
#define PORTF_CLK_EN              0x20  //Clock Enable for Port F
#define LEDs                      0x0E   //Enable LEDs 
#define SW1                       0x10   // Enable User Switch SW1 (PF4)
#define INT_PF4                   0x10    //Interrupt at PF4

volatile unsigned long a=0;
void EnableInterrupts (void);      // Enable Interrupts
void DisableInterrupts (void);      // Disable Interrupts
void Init_INT_GPIO(void);           // Initializa GPIO and Interrupts
void Delay (unsigned long value);
void WaitForInterrupt (void);
volatile unsigned long i=0;

void Init_INT_GPIO(void)
{
	volatile unsigned delay_clk;
	SYSCTL_RCGCGPIO_R |= PORTF_CLK_EN;   //EnableInterrupts clock for PortF
	 delay_clk =  SYSCTL_RCGCGPIO_R;   //dummy read to a table 
	//GPIO
	GPIO_PORTF_DEN_R |=(SW1 | LEDs);  //EnableInterrupts Digital I/O on PF4,PF3, PF1
	GPIO_PORTF_DIR_R &= (~SW1);   // Make PF4 I/P and PF3, PF1 O/Ps
	GPIO_PORTF_DIR_R |= LEDs;
	GPIO_PORTF_PUR_R  |= SW1;    //Enable weak pull up on PF4
	//Interrupt
	//void DisableInterrupts(void);
	GPIO_PORTF_IS_R &= ~INT_PF4;  //PF4 edge sensitive        
  GPIO_PORTF_IBE_R &= ~INT_PF4;  //PF4 is not both edge     
  GPIO_PORTF_IEV_R &= ~INT_PF4;   //PF4 is Falling Edge             
  GPIO_PORTF_ICR_R |= INT_PF4;    //Clear Interrupt flag for PF4
	
	GPIO_PORTF_IM_R |= INT_PF4;   //Enable Interrupt on PF4
	NVIC_PRI7_R = (NVIC_PRI7_R & 0xFF00FFFF) | 0X00A00000; //Setup Interrupt Priyority
  NVIC_EN0_R = NVIC_EN0_INT30 ; // Enable Interrupt 30 in NVIC
	//void EnableInterrupts(void);
}

void Delay (unsigned long value)
{
	for (i=0 ; i < value ; i++);
}

void GPIOPortF_Handler(void)                  //GPIO portF ISR(Interrupt Service Routine) Check the Startup code
{ // Debounce Delay
	Delay(200000);
	GPIO_PORTF_ICR_R = INT_PF4;
	GPIO_PORTF_DATA_R &= ~0xE;
	if(a%3 ==0)
	{
		GPIO_PORTF_DATA_R |=0x8;
		Delay(100000);
		GPIO_PORTF_DATA_R &= ~0x8;
		GPIO_PORTF_DATA_R |= 0x2;
		Delay(100000);
		GPIO_PORTF_DATA_R &= ~0xE;
		a++;
		return;
	}
	else if(a%3 ==1)
	{
		GPIO_PORTF_DATA_R |=0x4;
		Delay(100000);
		GPIO_PORTF_DATA_R &= ~0x4;
		GPIO_PORTF_DATA_R |= 0x8;
		Delay(100000);
		GPIO_PORTF_DATA_R &= ~0xE;
		a++;
		return;
	}
	else if(a%3==2)
	{
		GPIO_PORTF_DATA_R |= 0xE;
		Delay(200000);
		GPIO_PORTF_DATA_R &= ~0xE;
		a++;
		return;
	}
}
int main ()
{
	Init_INT_GPIO();
   while(1)
	WaitForInterrupt ();
}
